{
  "address": "0x9F5Ad11Cc4B0E73dF7BA1cB06Fc1adc45C449c2E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_player1",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_player2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_betAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "betAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commitment",
          "type": "bytes32"
        }
      ],
      "name": "commitMove",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "forfeit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gameState",
      "outputs": [
        {
          "internalType": "enum Game.GameState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Game.Move",
          "name": "move",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "secret",
          "type": "string"
        }
      ],
      "name": "generateCommitment",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "players",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "commitment",
          "type": "bytes32"
        },
        {
          "internalType": "enum Game.Move",
          "name": "move",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revealDeadline",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Game.Move",
          "name": "move",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "secret",
          "type": "string"
        }
      ],
      "name": "revealMove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "viewWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xbd552d6639480e57d3b6213d134ea94eea342e1a1c4714790685b8ead611213a",
  "receipt": {
    "to": null,
    "from": "0xd682915e56E8817685d9085c8adCA3dc140aCC4D",
    "contractAddress": "0x9F5Ad11Cc4B0E73dF7BA1cB06Fc1adc45C449c2E",
    "transactionIndex": 44,
    "gasUsed": "893978",
    "logsBloom": "0x
    "blockHash": "0xb84d13284b8412e0bde30570a2a4700708fc6021987d87e23883fbb39861b890",
    "transactionHash": "0xbd552d6639480e57d3b6213d134ea94eea342e1a1c4714790685b8ead611213a",
    "logs": [],
    "blockNumber": 7289119,
    "cumulativeGasUsed": "11286715",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
    "0x0a749bd98d391ddf9775bddafed0795922182dcd",
    "100"
  ],
  "numDeployments": 2,
  "solcInputHash": "50d0b62ede4e1896fadc95923f11e468",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_player1\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_player2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_betAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"betAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"}],\"name\":\"commitMove\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forfeit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameState\",\"outputs\":[{\"internalType\":\"enum Game.GameState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Game.Move\",\"name\":\"move\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"secret\",\"type\":\"string\"}],\"name\":\"generateCommitment\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"},{\"internalType\":\"enum Game.Move\",\"name\":\"move\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealDeadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Game.Move\",\"name\":\"move\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"secret\",\"type\":\"string\"}],\"name\":\"revealMove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Game.sol\":\"Game\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Game.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract Game {\\n    enum Move { None, Rock, Paper, Scissors }\\n    enum GameState { WaitingForPlayers, WaitingForReveal, Completed }\\n\\n    struct Player {\\n        address payable addr;\\n        bytes32 commitment;\\n        Move move;\\n    }\\n\\n    Player[2] public players;\\n    uint256 public betAmount;\\n    uint256 public revealDeadline;\\n    GameState public gameState;\\n\\n    modifier onlyPlayer() {\\n        require(msg.sender == players[0].addr || msg.sender == players[1].addr, \\\"Not a player\\\");\\n        _;\\n    }\\n\\n    constructor(address payable _player1, address payable _player2, uint256 _betAmount) {\\n        players[0] = Player(_player1, bytes32(0), Move.None);\\n        players[1] = Player(_player2, bytes32(0), Move.None);\\n        betAmount = _betAmount;\\n        gameState = GameState.WaitingForPlayers;\\n    }\\n\\n    function generateCommitment(Move move, string memory secret) external pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(move, secret));\\n}\\n\\n    function commitMove(bytes32 commitment) external payable onlyPlayer {\\n        require(gameState == GameState.WaitingForPlayers, \\\"Not accepting commitments\\\");\\n        require(msg.value == betAmount, \\\"Incorrect bet amount\\\");\\n\\n        Player storage player = msg.sender == players[0].addr ? players[0] : players[1];\\n        require(player.commitment == bytes32(0), \\\"Move already committed\\\");\\n\\n        player.commitment = commitment;\\n\\n        // Check if both players have committed\\n        if (players[0].commitment != bytes32(0) && players[1].commitment != bytes32(0)) {\\n            gameState = GameState.WaitingForReveal;\\n            revealDeadline = block.timestamp + 1 days; // 1-day deadline for revealing moves\\n        }\\n    }\\n\\n    function revealMove(Move move, string memory secret) external onlyPlayer {\\n        require(gameState == GameState.WaitingForReveal, \\\"Not accepting reveals\\\");\\n        Player storage player = msg.sender == players[0].addr ? players[0] : players[1];\\n        require(player.move == Move.None, \\\"Move already revealed\\\");\\n        require(keccak256(abi.encodePacked(move, secret)) == player.commitment, \\\"Invalid move or secret\\\");\\n\\n        player.move = move;\\n\\n        // Check if both players have revealed\\n        if (players[0].move != Move.None && players[1].move != Move.None) {\\n            determineWinner();\\n        }\\n    }\\n\\n    function determineWinner() internal {\\n        Move move1 = players[0].move;\\n        Move move2 = players[1].move;\\n\\n        // Logic to determine the winner\\n        if (move1 == move2) {\\n            // Draw\\n            players[0].addr.transfer(betAmount);\\n            players[1].addr.transfer(betAmount);\\n        } else if (\\n            (move1 == Move.Rock && move2 == Move.Scissors) ||\\n            (move1 == Move.Paper && move2 == Move.Rock) ||\\n            (move1 == Move.Scissors && move2 == Move.Paper)\\n        ) {\\n            // Player 1 wins\\n            players[0].addr.transfer(address(this).balance);\\n        } else {\\n            // Player 2 wins\\n            players[1].addr.transfer(address(this).balance);\\n        }\\n\\n        gameState = GameState.Completed;\\n    }\\n\\n    function forfeit() external onlyPlayer {\\n        require(gameState == GameState.WaitingForReveal, \\\"Cannot forfeit now\\\");\\n        require(block.timestamp > revealDeadline, \\\"Reveal deadline not passed\\\");\\n\\n        Player storage forfeiter = msg.sender == players[0].addr ? players[0] : players[1];\\n        Player storage opponent = msg.sender == players[0].addr ? players[1] : players[0];\\n\\n        require(forfeiter.move == Move.None, \\\"You already revealed\\\");\\n\\n        opponent.addr.transfer(address(this).balance);\\n        gameState = GameState.Completed;\\n    }\\n\\n    function viewWinner() external view returns (address) {\\n    require(gameState == GameState.Completed, \\\"Game is not yet completed\\\");\\n    require(players[0].move != Move.None && players[1].move != Move.None, \\\"Not all players revealed their moves\\\");\\n\\n    Move move1 = players[0].move;\\n    Move move2 = players[1].move;\\n\\n    if (move1 == move2) {\\n        return address(0); // Draw: return address(0) to indicate no winner\\n    } else if (\\n        (move1 == Move.Rock && move2 == Move.Scissors) ||\\n        (move1 == Move.Paper && move2 == Move.Rock) ||\\n        (move1 == Move.Scissors && move2 == Move.Paper)\\n    ) {\\n        return players[0].addr; // Player 1 wins\\n    } else {\\n        return players[1].addr; // Player 2 wins\\n    }\\n}\\n}\\n\",\"keccak256\":\"0x4a8bed9aa42743c30a973ac5ad704cc82aa395bd8a54fad6c159338246f15c15\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610ede380380610ede83398101604081905261002f916100de565b60408051606080820183526001600160a01b039586168083526000602080850182905293850181905280546001600160a01b0319908116909217815560018190556002805460ff199081169091558551938401865296909716808352928201879052920185905260038054909216179055600492909255600580548216905560069190915560088054909116905561011a565b80516001600160a01b03811681146100d957600080fd5b919050565b6000806000606084860312156100f357600080fd5b6100fc846100c2565b925061010a602085016100c2565b9150604084015190509250925092565b610db5806101296000396000f3fe6080604052600436106100865760003560e01c8063b14b28a311610059578063b14b28a314610120578063d1f9c24d14610136578063d24257c01461015d578063f3d86e4a14610173578063f71d96cb1461018857600080fd5b80630e5aa8fc1461008b578063392e2403146100be5780638972fe61146100eb578063a9ea37b61461010d575b600080fd5b34801561009757600080fd5b506100ab6100a6366004610ba6565b6101b7565b6040519081526020015b60405180910390f35b3480156100ca57600080fd5b506100d36101eb565b6040516001600160a01b0390911681526020016100b5565b3480156100f757600080fd5b5061010b610106366004610ba6565b6103f8565b005b61010b61011b366004610c6e565b610600565b34801561012c57600080fd5b506100ab60075481565b34801561014257600080fd5b506008546101509060ff1681565b6040516100b59190610c9d565b34801561016957600080fd5b506100ab60065481565b34801561017f57600080fd5b5061010b610797565b34801561019457600080fd5b506101a86101a3366004610c6e565b610976565b6040516100b593929190610cb7565b600082826040516020016101cc929190610cec565b6040516020818303038152906040528051906020012090505b92915050565b6000600260085460ff16600281111561020657610206610c87565b146102585760405162461bcd60e51b815260206004820152601960248201527f47616d65206973206e6f742079657420636f6d706c657465640000000000000060448201526064015b60405180910390fd5b60025460009060ff16600381111561027257610272610c87565b14158015610298575060055460009060ff16600381111561029557610295610c87565b14155b6102f05760405162461bcd60e51b8152602060048201526024808201527f4e6f7420616c6c20706c61796572732072657665616c6564207468656972206d6044820152636f76657360e01b606482015260840161024f565b60025460055460ff918216911680600381111561030f5761030f610c87565b82600381111561032157610321610c87565b0361032f5760009250505090565b600182600381111561034357610343610c87565b1480156103615750600381600381111561035f5761035f610c87565b145b806103995750600282600381111561037b5761037b610c87565b1480156103995750600181600381111561039757610397610c87565b145b806103d1575060038260038111156103b3576103b3610c87565b1480156103d1575060028160038111156103cf576103cf610c87565b145b156103ef576000805b60030201546001600160a01b03169392505050565b600060016103da565b6000546001600160a01b031633148061041b57506003546001600160a01b031633145b6104375760405162461bcd60e51b815260040161024f90610d38565b600160085460ff16600281111561045057610450610c87565b146104955760405162461bcd60e51b81526020600482015260156024820152744e6f7420616363657074696e672072657665616c7360581b604482015260640161024f565b600080546001600160a01b031633146104af5760036104b2565b60005b90506000600282015460ff1660038111156104cf576104cf610c87565b146105145760405162461bcd60e51b8152602060048201526015602482015274135bdd9948185b1c9958591e481c995d99585b1959605a1b604482015260640161024f565b8060010154838360405160200161052c929190610cec565b60405160208183030381529060405280519060200120146105885760405162461bcd60e51b8152602060048201526016602482015275125b9d985b1a59081b5bdd99481bdc881cd958dc995d60521b604482015260640161024f565b60028101805484919060ff191660018360038111156105a9576105a9610c87565b021790555060025460009060ff1660038111156105c8576105c8610c87565b141580156105ee575060055460009060ff1660038111156105eb576105eb610c87565b14155b156105fb576105fb6109aa565b505050565b6000546001600160a01b031633148061062357506003546001600160a01b031633145b61063f5760405162461bcd60e51b815260040161024f90610d38565b600060085460ff16600281111561065857610658610c87565b146106a55760405162461bcd60e51b815260206004820152601960248201527f4e6f7420616363657074696e6720636f6d6d69746d656e747300000000000000604482015260640161024f565b60065434146106ed5760405162461bcd60e51b8152602060048201526014602482015273125b98dbdc9c9958dd0818995d08185b5bdd5b9d60621b604482015260640161024f565b600080546001600160a01b0316331461070757600361070a565b60005b6001810154909150156107585760405162461bcd60e51b8152602060048201526016602482015275135bdd9948185b1c9958591e4818dbdb5b5a5d1d195960521b604482015260640161024f565b60018181018390555415801590610770575060045415155b15610793576008805460ff1916600117905561078f4262015180610d5e565b6007555b5050565b6000546001600160a01b03163314806107ba57506003546001600160a01b031633145b6107d65760405162461bcd60e51b815260040161024f90610d38565b600160085460ff1660028111156107ef576107ef610c87565b146108315760405162461bcd60e51b815260206004820152601260248201527143616e6e6f7420666f7266656974206e6f7760701b604482015260640161024f565b60075442116108825760405162461bcd60e51b815260206004820152601a60248201527f52657665616c20646561646c696e65206e6f7420706173736564000000000000604482015260640161024f565b600080546001600160a01b0316331461089c57600361089f565b60005b90506000808060030201546001600160a01b031633146108c05760006108c3565b60035b90506000600283015460ff1660038111156108e0576108e0610c87565b146109245760405162461bcd60e51b8152602060048201526014602482015273165bdd48185b1c9958591e481c995d99585b195960621b604482015260640161024f565b80546040516001600160a01b03909116904780156108fc02916000818181858888f1935050505015801561095c573d6000803e3d6000fd5b50600880546002919060ff19166001835b02179055505050565b6000816002811061098657600080fd5b60030201805460018201546002909201546001600160a01b03909116925060ff1683565b60025460055460ff91821691168060038111156109c9576109c9610c87565b8260038111156109db576109db610c87565b03610a5e57600080546006546040516001600160a01b03909216926108fc8215029290818181858888f19350505050158015610a1b573d6000803e3d6000fd5b506003546006546040516001600160a01b03909216916108fc82150291906000818181858888f19350505050158015610a58573d6000803e3d6000fd5b50610b7c565b6001826003811115610a7257610a72610c87565b148015610a9057506003816003811115610a8e57610a8e610c87565b145b80610ac857506002826003811115610aaa57610aaa610c87565b148015610ac857506001816003811115610ac657610ac6610c87565b145b80610b0057506003826003811115610ae257610ae2610c87565b148015610b0057506002816003811115610afe57610afe610c87565b145b15610b435760008060030201546040516001600160a01b03909116904780156108fc02916000818181858888f19350505050158015610a58573d6000803e3d6000fd5b6003546040516001600160a01b03909116904780156108fc02916000818181858888f1935050505015801561095c573d6000803e3d6000fd5b600880546002919060ff191660018361096d565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215610bb957600080fd5b823560048110610bc857600080fd5b9150602083013567ffffffffffffffff80821115610be557600080fd5b818501915085601f830112610bf957600080fd5b813581811115610c0b57610c0b610b90565b604051601f8201601f19908116603f01168101908382118183101715610c3357610c33610b90565b81604052828152886020848701011115610c4c57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b600060208284031215610c8057600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b6020810160038310610cb157610cb1610c87565b91905290565b6001600160a01b0384168152602081018390526060810160048310610cde57610cde610c87565b826040830152949350505050565b600060048410610cfe57610cfe610c87565b8360f81b8252825160005b81811015610d265760208186018101516001868401015201610d09565b50600092016001019182525092915050565b6020808252600c908201526b2737ba103090383630bcb2b960a11b604082015260600190565b808201808211156101e557634e487b7160e01b600052601160045260246000fdfea264697066735822122085bcb6fb347a1936d909478fa820cfcddbff42420091cc06eb537ee37e13212e64736f6c63430008180033",
  "deployedBytecode": "0x6080604052600436106100865760003560e01c8063b14b28a311610059578063b14b28a314610120578063d1f9c24d14610136578063d24257c01461015d578063f3d86e4a14610173578063f71d96cb1461018857600080fd5b80630e5aa8fc1461008b578063392e2403146100be5780638972fe61146100eb578063a9ea37b61461010d575b600080fd5b34801561009757600080fd5b506100ab6100a6366004610ba6565b6101b7565b6040519081526020015b60405180910390f35b3480156100ca57600080fd5b506100d36101eb565b6040516001600160a01b0390911681526020016100b5565b3480156100f757600080fd5b5061010b610106366004610ba6565b6103f8565b005b61010b61011b366004610c6e565b610600565b34801561012c57600080fd5b506100ab60075481565b34801561014257600080fd5b506008546101509060ff1681565b6040516100b59190610c9d565b34801561016957600080fd5b506100ab60065481565b34801561017f57600080fd5b5061010b610797565b34801561019457600080fd5b506101a86101a3366004610c6e565b610976565b6040516100b593929190610cb7565b600082826040516020016101cc929190610cec565b6040516020818303038152906040528051906020012090505b92915050565b6000600260085460ff16600281111561020657610206610c87565b146102585760405162461bcd60e51b815260206004820152601960248201527f47616d65206973206e6f742079657420636f6d706c657465640000000000000060448201526064015b60405180910390fd5b60025460009060ff16600381111561027257610272610c87565b14158015610298575060055460009060ff16600381111561029557610295610c87565b14155b6102f05760405162461bcd60e51b8152602060048201526024808201527f4e6f7420616c6c20706c61796572732072657665616c6564207468656972206d6044820152636f76657360e01b606482015260840161024f565b60025460055460ff918216911680600381111561030f5761030f610c87565b82600381111561032157610321610c87565b0361032f5760009250505090565b600182600381111561034357610343610c87565b1480156103615750600381600381111561035f5761035f610c87565b145b806103995750600282600381111561037b5761037b610c87565b1480156103995750600181600381111561039757610397610c87565b145b806103d1575060038260038111156103b3576103b3610c87565b1480156103d1575060028160038111156103cf576103cf610c87565b145b156103ef576000805b60030201546001600160a01b03169392505050565b600060016103da565b6000546001600160a01b031633148061041b57506003546001600160a01b031633145b6104375760405162461bcd60e51b815260040161024f90610d38565b600160085460ff16600281111561045057610450610c87565b146104955760405162461bcd60e51b81526020600482015260156024820152744e6f7420616363657074696e672072657665616c7360581b604482015260640161024f565b600080546001600160a01b031633146104af5760036104b2565b60005b90506000600282015460ff1660038111156104cf576104cf610c87565b146105145760405162461bcd60e51b8152602060048201526015602482015274135bdd9948185b1c9958591e481c995d99585b1959605a1b604482015260640161024f565b8060010154838360405160200161052c929190610cec565b60405160208183030381529060405280519060200120146105885760405162461bcd60e51b8152602060048201526016602482015275125b9d985b1a59081b5bdd99481bdc881cd958dc995d60521b604482015260640161024f565b60028101805484919060ff191660018360038111156105a9576105a9610c87565b021790555060025460009060ff1660038111156105c8576105c8610c87565b141580156105ee575060055460009060ff1660038111156105eb576105eb610c87565b14155b156105fb576105fb6109aa565b505050565b6000546001600160a01b031633148061062357506003546001600160a01b031633145b61063f5760405162461bcd60e51b815260040161024f90610d38565b600060085460ff16600281111561065857610658610c87565b146106a55760405162461bcd60e51b815260206004820152601960248201527f4e6f7420616363657074696e6720636f6d6d69746d656e747300000000000000604482015260640161024f565b60065434146106ed5760405162461bcd60e51b8152602060048201526014602482015273125b98dbdc9c9958dd0818995d08185b5bdd5b9d60621b604482015260640161024f565b600080546001600160a01b0316331461070757600361070a565b60005b6001810154909150156107585760405162461bcd60e51b8152602060048201526016602482015275135bdd9948185b1c9958591e4818dbdb5b5a5d1d195960521b604482015260640161024f565b60018181018390555415801590610770575060045415155b15610793576008805460ff1916600117905561078f4262015180610d5e565b6007555b5050565b6000546001600160a01b03163314806107ba57506003546001600160a01b031633145b6107d65760405162461bcd60e51b815260040161024f90610d38565b600160085460ff1660028111156107ef576107ef610c87565b146108315760405162461bcd60e51b815260206004820152601260248201527143616e6e6f7420666f7266656974206e6f7760701b604482015260640161024f565b60075442116108825760405162461bcd60e51b815260206004820152601a60248201527f52657665616c20646561646c696e65206e6f7420706173736564000000000000604482015260640161024f565b600080546001600160a01b0316331461089c57600361089f565b60005b90506000808060030201546001600160a01b031633146108c05760006108c3565b60035b90506000600283015460ff1660038111156108e0576108e0610c87565b146109245760405162461bcd60e51b8152602060048201526014602482015273165bdd48185b1c9958591e481c995d99585b195960621b604482015260640161024f565b80546040516001600160a01b03909116904780156108fc02916000818181858888f1935050505015801561095c573d6000803e3d6000fd5b50600880546002919060ff19166001835b02179055505050565b6000816002811061098657600080fd5b60030201805460018201546002909201546001600160a01b03909116925060ff1683565b60025460055460ff91821691168060038111156109c9576109c9610c87565b8260038111156109db576109db610c87565b03610a5e57600080546006546040516001600160a01b03909216926108fc8215029290818181858888f19350505050158015610a1b573d6000803e3d6000fd5b506003546006546040516001600160a01b03909216916108fc82150291906000818181858888f19350505050158015610a58573d6000803e3d6000fd5b50610b7c565b6001826003811115610a7257610a72610c87565b148015610a9057506003816003811115610a8e57610a8e610c87565b145b80610ac857506002826003811115610aaa57610aaa610c87565b148015610ac857506001816003811115610ac657610ac6610c87565b145b80610b0057506003826003811115610ae257610ae2610c87565b148015610b0057506002816003811115610afe57610afe610c87565b145b15610b435760008060030201546040516001600160a01b03909116904780156108fc02916000818181858888f19350505050158015610a58573d6000803e3d6000fd5b6003546040516001600160a01b03909116904780156108fc02916000818181858888f1935050505015801561095c573d6000803e3d6000fd5b600880546002919060ff191660018361096d565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215610bb957600080fd5b823560048110610bc857600080fd5b9150602083013567ffffffffffffffff80821115610be557600080fd5b818501915085601f830112610bf957600080fd5b813581811115610c0b57610c0b610b90565b604051601f8201601f19908116603f01168101908382118183101715610c3357610c33610b90565b81604052828152886020848701011115610c4c57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b600060208284031215610c8057600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b6020810160038310610cb157610cb1610c87565b91905290565b6001600160a01b0384168152602081018390526060810160048310610cde57610cde610c87565b826040830152949350505050565b600060048410610cfe57610cfe610c87565b8360f81b8252825160005b81811015610d265760208186018101516001868401015201610d09565b50600092016001019182525092915050565b6020808252600c908201526b2737ba103090383630bcb2b960a11b604082015260600190565b808201808211156101e557634e487b7160e01b600052601160045260246000fdfea264697066735822122085bcb6fb347a1936d909478fa820cfcddbff42420091cc06eb537ee37e13212e64736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 23,
        "contract": "contracts/Game.sol:Game",
        "label": "players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_struct(Player)18_storage)2_storage"
      },
      {
        "astId": 25,
        "contract": "contracts/Game.sol:Game",
        "label": "betAmount",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 27,
        "contract": "contracts/Game.sol:Game",
        "label": "revealDeadline",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 30,
        "contract": "contracts/Game.sol:Game",
        "label": "gameState",
        "offset": 0,
        "slot": "8",
        "type": "t_enum(GameState)10"
      }
    ],
    "types": {
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Player)18_storage)2_storage": {
        "base": "t_struct(Player)18_storage",
        "encoding": "inplace",
        "label": "struct Game.Player[2]",
        "numberOfBytes": "192"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(GameState)10": {
        "encoding": "inplace",
        "label": "enum Game.GameState",
        "numberOfBytes": "1"
      },
      "t_enum(Move)6": {
        "encoding": "inplace",
        "label": "enum Game.Move",
        "numberOfBytes": "1"
      },
      "t_struct(Player)18_storage": {
        "encoding": "inplace",
        "label": "struct Game.Player",
        "members": [
          {
            "astId": 12,
            "contract": "contracts/Game.sol:Game",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address_payable"
          },
          {
            "astId": 14,
            "contract": "contracts/Game.sol:Game",
            "label": "commitment",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 17,
            "contract": "contracts/Game.sol:Game",
            "label": "move",
            "offset": 0,
            "slot": "2",
            "type": "t_enum(Move)6"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}